curl(1)                                                    curl Manual                                                    curl(1)

NNAAMMEE
       curl - transfer a URL

SSYYNNOOPPSSIISS
       ccuurrll [[ooppttiioonnss // UURRLLss]]

DDEESSCCRRIIPPTTIIOONN
       ccuurrll  is a tool for transferring data from or to a server. It supports these protocols: DICT, FILE, FTP, FTPS, GOPHER, GO‐
       PHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP,  SMB,  SMBS,  SMTP,  SMTPS,
       TELNET or TFTP. The command is designed to work without user interaction.

       curl  offers  a  busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections,
       cookies, file transfer resume and more. As you will see below, the number of features will make your head spin.

       curl is powered by libcurl for all transfer-related features. See _l_i_b_c_u_r_l_(_3_) for details.

UURRLL
       The URL syntax is protocol-dependent. You find a detailed description in RFC 3986.

       You can specify multiple URLs or parts of URLs by writing part sets within braces and quoting the URL as in:

         "http://site.{one,two,three}.com"

       or you can get sequences of alphanumeric series by using [] as in:

         "ftp://ftp.example.com/file[1-100].txt"

         "ftp://ftp.example.com/file[001-100].txt"    (with leading zeros)

         "ftp://ftp.example.com/file[a-z].txt"

       Nested sequences are not supported, but you can use several ones next to each other:

         "http://example.com/archive[1996-1999]/vol[1-4]/part{a,b,c}.html"

       You can specify any amount of URLs on the command line. They will be fetched in a sequential manner in the  specified  or‐
       der. You can specify command line options and URLs mixed and in any order on the command line.

       You can specify a step counter for the ranges to get every Nth number or letter:

         "http://example.com/file[1-100:10].txt"

         "http://example.com/file[a-z:2].txt"

       When using [] or {} sequences when invoked from a command line prompt, you probably have to put the full URL within double
       quotes to avoid the shell from interfering with it. This also goes for other characters treated special, like for  example
       '&', '?' and '*'.

       Provide the IPv6 zone index in the URL with an escaped percentage sign and the interface name. Like in

         "http://[fe80::3%25eth0]/"

       If  you  specify URL without protocol:// prefix, curl will attempt to guess what protocol you might want. It will then de‐
       fault to HTTP but try other protocols based on often-used host name prefixes. For example, for host  names  starting  with
       "ftp." curl will assume you want to speak FTP.

       curl  will do its best to use what you pass to it as a URL. It is not trying to validate it as a syntactically correct URL
       by any means but is fairly liberal with what it accepts.

       curl will attempt to re-use connections for multiple file transfers, so that getting many files from the same server  will
       not  do  multiple  connects  / handshakes. This improves speed. Of course this is only done on files specified on a single
       command line and cannot be used between separate curl invocations.

OOUUTTPPUUTT
       If not told otherwise, curl writes the received data to stdout. It can be instructed to instead save that data into a  lo‐
       cal  file,  using the _-_o_, _-_-_o_u_t_p_u_t or _-_O_, _-_-_r_e_m_o_t_e_-_n_a_m_e options. If curl is given multiple URLs to transfer on the command
       line, it similarly needs multiple options for where to save them.

       curl does not parse or otherwise "understand" the content it gets or writes as output. It does no  encoding  or  decoding,
       unless explicitly asked to with dedicated command line options.

PPRROOTTOOCCOOLLSS
       curl supports numerous protocols, or put in URL terms: schemes. Your particular build may not support them all.

       DICT   Lets you lookup words using online dictionaries.

       FILE   Read or write local files. curl does not support accessing file:// URL remotely, but when running on Microsoft Win‐
              dows using the native UNC approach will work.

       FTP(S) curl supports the File Transfer Protocol with a lot of tweaks and levers. With or without using TLS.

       GOPHER(S)
              Retrieve files.

       HTTP(S)
              curl supports HTTP with numerous options and variations. It can speak HTTP version 0.9, 1.0, 1.1, 2 and 3 depending
              on build options and the correct command line options.

       IMAP(S)
              Using the mail reading protocol, curl can "download" emails for you. With or without using TLS.

       LDAP(S)
              curl can do directory lookups for you, with or without TLS.

       MQTT   curl  supports  MQTT  version 3. Downloading over MQTT equals "subscribe" to a topic while uploading/posting equals
              "publish" on a topic. MQTT over TLS is not supported (yet).

       POP3(S)
              Downloading from a pop3 server means getting a mail. With or without using TLS.

       RTMP(S)
              The Realtime Messaging Protocol is primarily used to server streaming media and curl can download it.

       RTSP   curl supports RTSP 1.0 downloads.

       SCP    curl supports SSH version 2 scp transfers.

       SFTP   curl supports SFTP (draft 5) done over SSH version 2.

       SMB(S) curl supports SMB version 1 for upload and download.

       SMTP(S)
              Uploading contents to an SMTP server means sending an email. With or without TLS.

       TELNET Telling curl to fetch a telnet URL starts an interactive session where it sends what it reads on stdin and  outputs
              what the server sends it.

       TFTP   curl can do TFTP downloads and uploads.

PPRROOGGRREESSSS MMEETTEERR
       curl  normally displays a progress meter during operations, indicating the amount of transferred data, transfer speeds and
       estimated time left, etc. The progress meter displays number of bytes and the speeds are in bytes per second. The suffixes
       (k, M, G, T, P) are 1024 based. For example 1k is 1024 bytes. 1M is 1048576 bytes.

       curl displays this data to the terminal by default, so if you invoke curl to do an operation and it is about to write data
       to the terminal, it _d_i_s_a_b_l_e_s the progress meter as otherwise it would mess up the output mixing  progress  meter  and  re‐
       sponse data.

       If  you  want  a  progress  meter for HTTP POST or PUT requests, you need to redirect the response output to a file, using
       shell redirect (>), _-_o_, _-_-_o_u_t_p_u_t or similar.

       This does not apply to FTP upload as that operation does not spit out any response data to the terminal.

       If you prefer a progress "bar" instead of the regular meter, _-_#_, _-_-_p_r_o_g_r_e_s_s_-_b_a_r is your friend. You can also  disable  the
       progress meter completely with the _-_s_, _-_-_s_i_l_e_n_t option.

OOPPTTIIOONNSS
       Options start with one or two dashes. Many of the options require an additional value next to them.

       The short "single-dash" form of the options, -d for example, may be used with or without a space between it and its value,
       although a space is a recommended separator. The long "double-dash" form, _-_d_, _-_-_d_a_t_a for example, requires a space between
       it and its value.

       Short  version options that do not need any additional values can be used immediately next to each other, like for example
       you can specify all the options -O, -L and -v at once as -OLv.

       In general, all boolean options are enabled with --ooppttiioonn and yet again disabled with --nnoo--option. That is,  you  use  the
       same  option  name  but  prefix  it with "no-". However, in this list we mostly only list and show the --option version of
       them.

       --abstract-unix-socket <path>
              (HTTP) Connect through an abstract Unix domain socket, instead of using the network.  Note: netstat shows the  path
              of an abstract socket prefixed with '@', however the <path> argument should not have this leading character.

              Example:
               curl --abstract-unix-socket socketpath https://example.com

              See also _-_-_u_n_i_x_-_s_o_c_k_e_t. Added in 7.53.0.

       --alt-svc <file name>
              (HTTPS)  This option enables the alt-svc parser in curl. If the file name points to an existing alt-svc cache file,
              that will be used. After a completed transfer, the cache will be saved to the file name again if it has been  modi‐
              fied.

              Specify a "" file name (zero length) to avoid loading/saving and make curl just handle the cache in memory.

              If  this option is used several times, curl will load contents from all the files but the last one will be used for
              saving.

              Example:
               curl --alt-svc svc.txt https://example.com

              See also _-_-_r_e_s_o_l_v_e and _-_-_c_o_n_n_e_c_t_-_t_o. Added in 7.64.1.

       --anyauth
              (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims
              to  support. This is done by first doing a request and checking the response-headers, thus possibly inducing an ex‐
              tra network round-trip. This is used instead of setting a specific authentication method, which  you  can  do  with
              _-_-_b_a_s_i_c, _-_-_d_i_g_e_s_t, _-_-_n_t_l_m, and _-_-_n_e_g_o_t_i_a_t_e.

              Using  _-_-_a_n_y_a_u_t_h  is  not  recommended if you do uploads from stdin, since it may require data to be sent twice and
              then the client must be able to rewind. If the need should arise when uploading from stdin,  the  upload  operation
              will fail.

              Used together with _-_u_, _-_-_u_s_e_r.

              Example:
               curl --anyauth --user me:pwd https://example.com

              See also _-_-_p_r_o_x_y_-_a_n_y_a_u_t_h, _-_-_b_a_s_i_c and _-_-_d_i_g_e_s_t.

       -a, --append
              (FTP  SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it. If the re‐
              mote file does not exist, it will be created. Note that this flag  is  ignored  by  some  SFTP  servers  (including
              OpenSSH).

              Example:
               curl --upload-file local --append ftp://example.com/

              See also _-_r_, _-_-_r_a_n_g_e and _-_C_, _-_-_c_o_n_t_i_n_u_e_-_a_t.

       --aws-sigv4 <provider1[:provider2[:region[:service]]]>
              Use AWS V4 signature authentication in the transfer.

              The provider argument is a string that is used by the algorithm when creating outgoing authentication headers.

              The  region  argument is a string that points to a geographic area of a resources collection (region-code) when the
              region name is omitted from the endpoint.

              The service argument is a string that points to a function provided by a cloud (service-code) when the service name
              is omitted from the endpoint.

              Example:
               curl --aws-sigv4 "aws:amz:east-2:es" --user "key:secret" https://example.com

              See also _-_-_b_a_s_i_c and _-_u_, _-_-_u_s_e_r. Added in 7.75.0.

       --basic
              (HTTP)  Tells  curl  to  use HTTP Basic authentication with the remote host. This is the default and this option is
              usually pointless, unless you use it to override a previously set  option  that  sets  a  different  authentication
              method (such as _-_-_n_t_l_m, _-_-_d_i_g_e_s_t, or _-_-_n_e_g_o_t_i_a_t_e).

              Used together with _-_u_, _-_-_u_s_e_r.

              Example:
               curl -u name:password --basic https://example.com

              See also _-_-_p_r_o_x_y_-_b_a_s_i_c.

       --cacert <file>
              (TLS)  Tells  curl  to use the specified certificate file to verify the peer. The file may contain multiple CA cer‐
              tificates. The certificate(s) must be in PEM format. Normally curl is built to use a default file for this, so this
              option is typically used to alter that default file.

              curl  recognizes the environment variable named 'CURL_CA_BUNDLE' if it is set, and uses the given path as a path to
              a CA cert bundle. This option overrides that variable.

              The windows version of curl will automatically look for a CA certs file named 'curl-ca-bundle.crt', either  in  the
              same directory as curl.exe, or in the Current Working Directory, or in any folder along your PATH.

              If  curl  is built against the NSS SSL library, the NSS PEM PKCS#11 module (libnsspem.so) needs to be available for
              this option to work properly.

              (iOS and macOS only) If curl is built against Secure Transport, then this option is supported for backward compati‐
              bility  with other SSL engines, but it should not be set. If the option is not set, then curl will use the certifi‐
              cates in the system and user Keychain to verify the peer, which is the preferred method  of  verifying  the  peer's
              certificate chain.

              (Schannel only) This option is supported for Schannel in Windows 7 or later with libcurl 7.60 or later. This option
              is supported for backward compatibility with other SSL engines; instead it is recommended to use Windows' store  of
              root certificates (the default for Schannel).

              If this option is used several times, the last one will be used.

              Example:
               curl --cacert CA-file.txt https://example.com

              See also _-_-_c_a_p_a_t_h and _-_k_, _-_-_i_n_s_e_c_u_r_e.

       --capath <dir>
              (TLS)  Tells  curl to use the specified certificate directory to verify the peer. Multiple paths can be provided by
              separating them with ":" (e.g.  "path1:path2:path3"). The certificates must be in PEM format, and if curl is  built
              against  OpenSSL,  the  directory  must have been processed using the c_rehash utility supplied with OpenSSL. Using
              _-_-_c_a_p_a_t_h can allow OpenSSL-powered curl to make SSL-connections much more efficiently than using  _-_-_c_a_c_e_r_t  if  the
              --cacert file contains many CA certificates.

              If this option is set, the default capath value will be ignored, and if it is used several times, the last one will
              be used.

              Example:
               curl --capath /local/directory https://example.com

              See also _-_-_c_a_c_e_r_t and _-_k_, _-_-_i_n_s_e_c_u_r_e.

       --cert-status
              (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka.  OCSP
              stapling) TLS extension.

              If  this  option  is enabled and the server sends an invalid (e.g. expired) response, if the response suggests that
              the server certificate has been revoked, or no response at all is received, the verification fails.

              This is currently only implemented in the OpenSSL, GnuTLS and NSS backends.

              Example:
               curl --cert-status https://example.com

              See also _-_-_p_i_n_n_e_d_p_u_b_k_e_y. Added in 7.41.0.

       --cert-type <type>
              (TLS) Tells curl what type the provided client certificate is using. PEM, DER, ENG and P12 are recognized types. If
              not specified, PEM is assumed.

              If this option is used several times, the last one will be used.

              Example:
               curl --cert-type PEM --cert file https://example.com

              See also _-_E_, _-_-_c_e_r_t, _-_-_k_e_y and _-_-_k_e_y_-_t_y_p_e.

       -E, --cert <certificate[:password]>
              (TLS)  Tells curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-
              based protocol. The certificate must be in PKCS#12 format if using Secure Transport, or PEM  format  if  using  any
              other engine. If the optional password is not specified, it will be queried for on the terminal. Note that this op‐
              tion assumes a "certificate" file that is the private key and the client certificate concatenated! See  _-_E_,  _-_-_c_e_r_t
              and _-_-_k_e_y to specify them independently.

              If  curl is built against the NSS SSL library then this option can tell curl the nickname of the certificate to use
              within the NSS database defined by the environment variable SSL_DIR (or by default /etc/pki/nssdb). If the NSS  PEM
              PKCS#11 module (libnsspem.so) is available then PEM files may be loaded. If you want to use a file from the current
              directory, please precede it with "./" prefix, in order to avoid confusion with a nickname. If  the  nickname  con‐
              tains  ":", it needs to be preceded by "\" so that it is not recognized as password delimiter. If the nickname con‐
              tains "\", it needs to be escaped as "\\" so that it is not recognized as an escape character.

              If curl is built against OpenSSL library, and the engine pkcs11 is available, then a PKCS#11 URI (RFC 7512) can  be
              used to specify a certificate located in a PKCS#11 device. A string beginning with "pkcs11:" will be interpreted as
              a PKCS#11 URI. If a PKCS#11 URI is provided, then the _-_-_e_n_g_i_n_e option will be set as "pkcs11" if none was  provided
              and the _-_-_c_e_r_t_-_t_y_p_e option will be set as "ENG" if none was provided.

              (iOS  and macOS only) If curl is built against Secure Transport, then the certificate string can either be the name
              of a certificate/private key in the system or user keychain, or the path to a PKCS#12-encoded certificate and  pri‐
              vate  key.  If  you  want to use a file from the current directory, please precede it with "./" prefix, in order to
              avoid confusion with a nickname.

              (Schannel only) Client certificates must be specified by a path expression to a certificate store. (Loading PFX  is
              not supported; you can import it to a store first). You can use "<store location>\<store name>\<thumbprint>" to re‐
              fer    to    a    certificate    in    the     system     certificates     store,     for     example,     "Curren‐
              tUser\MY\934a7ac6f8a5d579285a74fa61e19f23ddfe8d7a".  Thumbprint  is usually a SHA-1 hex string which you can see in
              certificate details. Following store locations are supported: CurrentUser, LocalMachine, CurrentService,  Services,
              CurrentUserGroupPolicy, LocalMachineGroupPolicy, LocalMachineEnterprise.

              If this option is used several times, the last one will be used.

              Example:
               curl --cert certfile --key keyfile https://example.com

              See also _-_-_c_e_r_t_-_t_y_p_e, _-_-_k_e_y and _-_-_k_e_y_-_t_y_p_e.

       --ciphers <list of ciphers>
              (TLS)  Specifies which ciphers to use in the connection. The list of ciphers must specify valid ciphers. Read up on
              SSL cipher list details on this URL:

               https://curl.se/docs/ssl-ciphers.html

              If this option is used several times, the last one will be used.

              Example:
               curl --ciphers ECDHE-ECDSA-AES256-CCM8 https://example.com

              See also _-_-_t_l_s_v_1_._3.

       --compressed-ssh
              (SCP SFTP) Enables built-in SSH compression.  This is a request, not an order; the server may or may not do it.

              Example:
               curl --compressed-ssh sftp://example.com/

              See also _-_-_c_o_m_p_r_e_s_s_e_d. Added in 7.56.0.

       --compressed
              (HTTP) Request a compressed response using one of the algorithms curl supports, and  automatically  decompress  the
              content. Headers are not modified.

              If  this option is used and the server sends an unsupported encoding, curl will report an error. This is a request,
              not an order; the server may or may not deliver data compressed.

              Example:
               curl --compressed https://example.com

              See also _-_-_c_o_m_p_r_e_s_s_e_d_-_s_s_h.

       -K, --config <file>
              Specify a text file to read curl arguments from. The command line arguments found in the text file will be used  as
              if they were provided on the command line.

              Options and their parameters must be specified on the same line in the file, separated by whitespace, colon, or the
              equals sign. Long option names can optionally be given in the config file without the initial double dashes and  if
              so,  the  colon  or equals characters can be used as separators. If the option is specified with one or two dashes,
              there can be no colon or equals character between the option and its parameter.

              If the parameter contains whitespace (or starts with : or =), the parameter must be enclosed within quotes.  Within
              double  quotes,  the following escape sequences are available: \\, \", \t, \n, \r and \v. A backslash preceding any
              other letter is ignored.

              If the first column of a config line is a '#' character, the rest of the line will be treated as a comment.

              Only write one option per physical line in the config file.

              Specify the filename to _-_K_, _-_-_c_o_n_f_i_g as '-' to make curl read the file from stdin.

              Note that to be able to specify a URL in the config file, you need to specify it using the _-_-_u_r_l option, and not by
              simply writing the URL on its own line. So, it could look similar to this:

              url = "https://curl.se/docs/"

               # --- Example file ---
               # this is a comment
               url = "example.com"
               output = "curlhere.html"
               user-agent = "superagent/1.0"

               # and fetch another URL too
               url = "example.com/docs/manpage.html"
               -O
               referer = "http://nowhereatall.example.com/"
               # --- End of example file ---

              When curl is invoked, it (unless _-_q_, _-_-_d_i_s_a_b_l_e is used) checks for a default config file and uses it if found, even
              when _-_K_, _-_-_c_o_n_f_i_g is used. The default config file is checked for in the following places in this order:

              1) "$CURL_HOME/.curlrc"

              2) "$XDG_CONFIG_HOME/.curlrc" (Added in 7.73.0)

              3) "$HOME/.curlrc"

              4) Windows: "%USERPROFILE%\.curlrc"

              5) Windows: "%APPDATA%\.curlrc"

              6) Windows: "%USERPROFILE%\Application Data\.curlrc"

              7) Non-windows: use getpwuid to find the home directory

              8) On windows, if it finds no .curlrc file in the sequence described above, it checks for one in the same  dir  the
              curl executable is placed.

              This option can be used multiple times to load multiple config files.

              Example:
               curl --config file.txt https://example.com

              See also _-_q_, _-_-_d_i_s_a_b_l_e.

       --connect-timeout <fractional seconds>
              Maximum  time  in  seconds  that you allow curl's connection to take.  This only limits the connection phase, so if
              curl connects within the given period it will continue - if not it will exit.  Since version  7.32.0,  this  option
              accepts decimal values.

              If this option is used several times, the last one will be used.

              Examples:
               curl --connect-timeout 20 https://example.com
               curl --connect-timeout 3.14 https://example.com

              See also _-_m_, _-_-_m_a_x_-_t_i_m_e.

       --connect-to <HOST1:PORT1:HOST2:PORT2>

              For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.  This option is suitable to direct re‐
              quests at a specific server, e.g. at a specific cluster node in a cluster of servers. This option is only  used  to
              establish the network connection. It does NOT affect the hostname/port that is used for TLS/SSL (e.g. SNI, certifi‐
              cate verification) or for the application protocols. "HOST1" and "PORT1" may be  the  empty  string,  meaning  "any
              host/port". "HOST2" and "PORT2" may also be the empty string, meaning "use the request's original host/port".

              A  "host"  specified  to this option is compared as a string, so it needs to match the name used in request URL. It
              can be either numerical such as "127.0.0.1" or the full host name such as "example.org".

              This option can be used many times to add many connect rules.

              Example:
               curl --connect-to example.com:443:example.net:8443 https://example.com

              See also _-_-_r_e_s_o_l_v_e and _-_H_, _-_-_h_e_a_d_e_r. Added in 7.49.0.

       -C, --continue-at <offset>
              Continue/Resume a previous file transfer at the given offset. The given offset is the exact number  of  bytes  that
              will  be  skipped,  counting  from the beginning of the source file before it is transferred to the destination. If
              used with uploads, the FTP server command SIZE will not be used by curl.

              Use "-C -" to tell curl to automatically find out where/how to resume the transfer. It then  uses  the  given  out‐
              put/input files to figure that out.

              If this option is used several times, the last one will be used.

              Examples:
               curl -C - https://example.com
               curl -C 400 https://example.com

              See also _-_r_, _-_-_r_a_n_g_e.

       -c, --cookie-jar <filename>
              (HTTP)  Specify to which file you want curl to write all cookies after a completed operation. Curl writes all cook‐
              ies from its in-memory cookie storage to the given file at the end of operations. If no cookies are known, no  data
              will be written. The file will be written using the Netscape cookie file format. If you set the file name to a sin‐
              gle dash, "-", the cookies will be written to stdout.

              This command line option will activate the cookie engine that makes curl record and use cookies. Another way to ac‐
              tivate it is to use the _-_b_, _-_-_c_o_o_k_i_e option.

              If  the  cookie jar cannot be created or written to, the whole curl operation will not fail or even report an error
              clearly. Using _-_v_, _-_-_v_e_r_b_o_s_e will get a warning displayed, but that is the only visible feedback you get about this
              possibly lethal situation.

              If this option is used several times, the last specified file name will be used.

              Examples:
               curl -c store-here.txt https://example.com
               curl -c store-here.txt -b read-these https://example.com

              See also _-_b_, _-_-_c_o_o_k_i_e.

       -b, --cookie <data|filename>
              (HTTP)  Pass  the  data to the HTTP server in the Cookie header. It is supposedly the data previously received from
              the server in a "Set-Cookie:" line. The data should be in the format "NAME1=VALUE1; NAME2=VALUE2".

              If no '=' symbol is used in the argument, it is instead treated as a filename  to  read  previously  stored  cookie
              from. This option also activates the cookie engine which will make curl record incoming cookies, which may be handy
              if you are using this in combination with the _-_L_, _-_-_l_o_c_a_t_i_o_n option or do multiple URL transfers on  the  same  in‐
              voke. If the file name is exactly a minus ("-"), curl will instead read the contents from stdin.

              The  file  format  of  the  file  to  read cookies from should be plain HTTP headers (Set-Cookie style) or the Net‐
              scape/Mozilla cookie file format.

              The file specified with _-_b_, _-_-_c_o_o_k_i_e is only used as input. No cookies will be written to the file. To store  cook‐
              ies, use the _-_c_, _-_-_c_o_o_k_i_e_-_j_a_r option.

              If you use the Set-Cookie file format and do not specify a domain then the cookie is not sent since the domain will
              never match. To address this, set a domain in Set-Cookie line (doing that will include sub-domains) or  preferably:
              use the Netscape format.

              This option can be used multiple times.

              Users  often  want  to  both  read  cookies from a file and write updated cookies back to a file, so using both _-_b_,
              _-_-_c_o_o_k_i_e and _-_c_, _-_-_c_o_o_k_i_e_-_j_a_r in the same command line is common.

              Examples:
               curl -b cookiefile https://example.com
               curl -b cookiefile -c cookiefile https://example.com

              See also _-_c_, _-_-_c_o_o_k_i_e_-_j_a_r and _-_j_, _-_-_j_u_n_k_-_s_e_s_s_i_o_n_-_c_o_o_k_i_e_s.

       --create-dirs
              When used in conjunction with the _-_o_, _-_-_o_u_t_p_u_t option, curl will create the necessary local directory hierarchy  as
              needed.  This  option creates the directories mentioned with the _-_o_, _-_-_o_u_t_p_u_t option, nothing else. If the --output
              file name uses no directory, or if the directories it mentions already exist, no directories will be created.

              Created dirs are made with mode 0750 on unix style file systems.

              To create remote directories when using FTP or SFTP, try _-_-_f_t_p_-_c_r_e_a_t_e_-_d_i_r_s.

              Example:
               curl --create-dirs --output local/dir/file https://example.com

              See also _-_-_f_t_p_-_c_r_e_a_t_e_-_d_i_r_s and _-_-_o_u_t_p_u_t_-_d_i_r.

       --create-file-mode <mode>
              (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows
              the user to set which 'mode' to set on the file at creation time, instead of the default 0644.

              This option takes an octal number as argument.

              If this option is used several times, the last one will be used.

              Example:
               curl --create-file-mode 0777 -T localfile sftp://example.com/new

              See also _-_-_f_t_p_-_c_r_e_a_t_e_-_d_i_r_s. Added in 7.75.0.

       --crlf (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).

              (SMTP added in 7.40.0)

              Example:
               curl --crlf -T file ftp://example.com/

              See also _-_B_, _-_-_u_s_e_-_a_s_c_i_i.

       --crlfile <file>
              (TLS)  Provide  a  file using PEM format with a Certificate Revocation List that may specify peer certificates that
              are to be considered revoked.

              If this option is used several times, the last one will be used.

              Example:
               curl --crlfile rejects.txt https://example.com

              See also _-_-_c_a_c_e_r_t and _-_-_c_a_p_a_t_h.

       --curves <algorithm list>
              (TLS) Tells curl to request specific curves to use during SSL session establishment according  to  RFC  8422,  5.1.
              Multiple algorithms can be provided by separating them with ":" (e.g.  "X25519:P-521").  The parameter is available
              identically in the "openssl s_client/s_server" utilities.

              _-_-_c_u_r_v_e_s allows a OpenSSL powered curl to make SSL-connections with exactly the (EC) curve requested by the client,
              avoiding nontransparent client/server negotiations.

              If this option is set, the default curves list built into openssl will be ignored.

              Example:
               curl --curves X25519 https://example.com

              See also _-_-_c_i_p_h_e_r_s. Added in 7.73.0.

       --data-ascii <data>
              (HTTP) This is just an alias for _-_d_, _-_-_d_a_t_a.

              Example:
               curl --data-ascii @file https://example.com

              See also _-_-_d_a_t_a_-_b_i_n_a_r_y, _-_-_d_a_t_a_-_r_a_w and _-_-_d_a_t_a_-_u_r_l_e_n_c_o_d_e.

       --data-binary <data>
              (HTTP) This posts data exactly as specified with no extra processing whatsoever.

              If  you  start the data with the letter @, the rest should be a filename. Data is posted in a similar manner as _-_d_,
              _-_-_d_a_t_a does, except that newlines and carriage returns are preserved and conversions are never done.

              Like _-_d_, _-_-_d_a_t_a the default content-type sent to the server is application/x-www-form-urlencoded. If you  want  the
              data  to  be treated as arbitrary binary data by the server then set the content-type to octet-stream: -H "Content-
              Type: application/octet-stream".

              If this option is used several times, the ones following the first will append data as described in _-_d_, _-_-_d_a_t_a.

              Example:
               curl --data-binary @filename https://example.com

              See also _-_-_d_a_t_a_-_a_s_c_i_i.

       --data-raw <data>
              (HTTP) This posts data similarly to _-_d_, _-_-_d_a_t_a but without the special interpretation of the @ character.

              Examples:
               curl --data-raw "hello" https://example.com
               curl --data-raw "@at@at@" https://example.com

              See also _-_d_, _-_-_d_a_t_a. Added in 7.43.0.

       --data-urlencode <data>
              (HTTP) This posts data, similar to the other _-_d_, _-_-_d_a_t_a options with the exception that this performs URL-encoding.

              To be CGI-compliant, the <data> part should begin with a _n_a_m_e followed by a separator and a content  specification.
              The <data> part can be passed to curl using one of the following syntaxes:

              content
                     This  will  make  curl URL-encode the content and pass that on. Just be careful so that the content does not
                     contain any = or @ symbols, as that will then make the syntax match one of the other cases below!

              =content
                     This will make curl URL-encode the content and pass that on. The preceding = symbol is not included  in  the
                     data.

              name=content
                     This  will make curl URL-encode the content part and pass that on. Note that the name part is expected to be
                     URL-encoded already.

              @filename
                     This will make curl load data from the given file (including any newlines), URL-encode that data and pass it
                     on in the POST.

              name@filename
                     This will make curl load data from the given file (including any newlines), URL-encode that data and pass it
                     on in the POST. The name part gets an equal sign appended, resulting in  _n_a_m_e_=_u_r_l_e_n_c_o_d_e_d_-_f_i_l_e_-_c_o_n_t_e_n_t.  Note
                     that the name is expected to be URL-encoded already.

       Examples:
        curl --data-urlencode name=val https://example.com
        curl --data-urlencode =encodethis https://example.com
        curl --data-urlencode name@file https://example.com
        curl --data-urlencode @fileonly https://example.com

       See also _-_d_, _-_-_d_a_t_a and _-_-_d_a_t_a_-_r_a_w.

       -d, --data <data>
              (HTTP MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when
              a user has filled in an HTML form and presses the submit button. This will cause curl  to  pass  the  data  to  the
              server using the content-type application/x-www-form-urlencoded. Compare to _-_F_, _-_-_f_o_r_m.

              _-_-_d_a_t_a_-_r_a_w  is  almost  the same but does not have a special interpretation of the @ character. To post data purely
              binary, you should instead use the _-_-_d_a_t_a_-_b_i_n_a_r_y option. To URL-encode the value  of  a  form  field  you  may  use
              _-_-_d_a_t_a_-_u_r_l_e_n_c_o_d_e.

              If  any  of these options is used more than once on the same command line, the data pieces specified will be merged
              with a separating &-symbol. Thus, using '-d name=daniel -d skill=lousy' would generate a post chunk that looks like
              'name=daniel&skill=lousy'.

              If  you  start  the  data with the letter @, the rest should be a file name to read the data from, or - if you want
              curl to read the data from stdin. Posting data from a file named 'foobar' would thus be done with _-_d_, _-_-_d_a_t_a  @foo‐
              bar.  When _-_d_, _-_-_d_a_t_a is told to read from a file like that, carriage returns and newlines will be stripped out. If
              you do not want the @ character to have a special interpretation use _-_-_d_a_t_a_-_r_a_w instead.

              Examples:
               curl -d "name=curl" https://example.com
               curl -d "name=curl" -d "tool=cmdline" https://example.com
               curl -d @filename https://example.com

              See also _-_-_d_a_t_a_-_b_i_n_a_r_y, _-_-_d_a_t_a_-_u_r_l_e_n_c_o_d_e and _-_-_d_a_t_a_-_r_a_w. This option overrides _-_F_, _-_-_f_o_r_m and _-_I_,  _-_-_h_e_a_d  and  _-_T_,
              _-_-_u_p_l_o_a_d_-_f_i_l_e.

       --delegation <LEVEL>
              (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.

              none   Do not allow any delegation.

              policy Delegates if and only if the OK-AS-DELEGATE flag is set in the Kerberos service ticket, which is a matter of
                     realm policy.

              always Unconditionally allow the server to delegate.

       If this option is used several times, the last one will be used.

       Example:
        curl --delegation "none" https://example.com

       See also _-_k_, _-_-_i_n_s_e_c_u_r_e and _-_-_s_s_l.

       --digest
              (HTTP) Enables HTTP Digest authentication. This is an authentication scheme that prevents the password  from  being
              sent  over  the  wire in clear text. Use this in combination with the normal _-_u_, _-_-_u_s_e_r option to set user name and
              password.

              If this option is used several times, only the first one is used.

              Example:
               curl -u name:password --digest https://example.com

              See also _-_u_, _-_-_u_s_e_r, _-_-_p_r_o_x_y_-_d_i_g_e_s_t and _-_-_a_n_y_a_u_t_h. This option overrides _-_-_b_a_s_i_c and _-_-_n_t_l_m and _-_-_n_e_